{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport notes from '../../../src/data/data';\nconst handler = nc().get((req, res) => {\n  res.json({\n    data: notes\n  });\n}).post((req, res) => {\n  const note = _objectSpread(_objectSpread({}, req.body), {}, {\n    id: Date.now()\n  });\n\n  if (!note) {\n    return res.status(400).json({\n      message: 'note cannot be empty'\n    });\n  }\n\n  notes.push(note);\n  console.log(notes);\n  res.json({\n    data: note\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/shehroze/Desktop/COURSES/WebDev/nextJs-follow-along/pages/api/note/index.js"],"names":["nc","notes","handler","get","req","res","json","data","post","note","body","id","Date","now","status","message","push","console","log"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AAEA,OAAOC,KAAP,MAAkB,wBAAlB;AAEA,MAAMC,OAAO,GAAGF,EAAE,GAEjBG,GAFe,CAEX,CAACC,GAAD,EAAMC,GAAN,KAAY;AACbA,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEN;AAAR,GAAT;AACH,CAJe,EAMfO,IANe,CAMV,CAACJ,GAAD,EAAMC,GAAN,KAAY;AACd,QAAMI,IAAI,mCAAQL,GAAG,CAACM,IAAZ;AAAkBC,IAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL;AAAtB,IAAV;;AACA,MAAG,CAACJ,IAAJ,EAAS;AACL,WAAOJ,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB;AAACS,MAAAA,OAAO,EAAE;AAAV,KAArB,CAAP;AACH;;AACDd,EAAAA,KAAK,CAACe,IAAN,CAAWP,IAAX;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYjB,KAAZ;AAEAI,EAAAA,GAAG,CAACC,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEE;AAAR,GAAT;AACH,CAfe,CAAhB;AAiBA,eAAeP,OAAf","sourcesContent":["import nc from 'next-connect'\r\n\r\nimport notes from '../../../src/data/data';\r\n\r\nconst handler = nc()\r\n\r\n.get((req, res)=>{\r\n    res.json({ data: notes})\r\n})\r\n\r\n.post((req, res)=>{\r\n    const note = { ...req.body, id: Date.now()};\r\n    if(!note){\r\n        return res.status(400).json({message: 'note cannot be empty'})\r\n    }\r\n    notes.push(note)\r\n    console.log(notes)\r\n\r\n    res.json({ data: note})\r\n})\r\n\r\nexport default handler;"]},"metadata":{},"sourceType":"module"}