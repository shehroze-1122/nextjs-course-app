{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\n\nconst notes = require('../../../src/data/data.js');\n\nconst getNote = id => notes.findIndex(note => note.id === parseInt(id));\n\nconst handler = nc().get((req, res) => {\n  console.log('id', notes);\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    return res.status(404).json({\n      message: 'Note not found'\n    });\n  }\n\n  res.json({\n    data: note\n  });\n}).post((req, res) => {\n  const note = _objectSpread(_objectSpread({}, req.body), {}, {\n    id: Date.now()\n  });\n\n  if (!note) {\n    return res.status(400).json({\n      message: 'note cannot be empty'\n    });\n  }\n\n  notes.push(note);\n  res.json({\n    data: note\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/shehroze/Desktop/COURSES/WebDev/nextJs-follow-along/pages/api/note/[id].js"],"names":["nc","notes","require","getNote","id","findIndex","note","parseInt","handler","get","req","res","console","log","query","status","json","message","data","post","body","Date","now","push"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,2BAAD,CAArB;;AAEA,MAAMC,OAAO,GAAIC,EAAD,IAAMH,KAAK,CAACI,SAAN,CAAiBC,IAAD,IAAQA,IAAI,CAACF,EAAL,KAAUG,QAAQ,CAACH,EAAD,CAA1C,CAAtB;;AAEA,MAAMI,OAAO,GAAGR,EAAE,GACjBS,GADe,CACX,CAACC,GAAD,EAAMC,GAAN,KAAY;AAEbC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBZ,KAAlB;AACA,QAAMK,IAAI,GAAGH,OAAO,CAACO,GAAG,CAACI,KAAJ,CAAUV,EAAX,CAApB;;AAEA,MAAG,CAACE,IAAJ,EAAS;AACL,WAAOK,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAC;AAAT,KAArB,CAAP;AACH;;AACDN,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAT;AACH,CAVe,EAYfa,IAZe,CAYV,CAACT,GAAD,EAAMC,GAAN,KAAY;AACd,QAAML,IAAI,mCAAQI,GAAG,CAACU,IAAZ;AAAkBhB,IAAAA,EAAE,EAAEiB,IAAI,CAACC,GAAL;AAAtB,IAAV;;AACA,MAAG,CAAChB,IAAJ,EAAS;AACL,WAAOK,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAE;AAAV,KAArB,CAAP;AACH;;AACDhB,EAAAA,KAAK,CAACsB,IAAN,CAAWjB,IAAX;AACAK,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEE,IAAAA,IAAI,EAAEZ;AAAR,GAAT;AACH,CAnBe,CAAhB;AAqBA,eAAeE,OAAf","sourcesContent":["import nc from 'next-connect'\r\nconst notes = require('../../../src/data/data.js')\r\n\r\nconst getNote = (id)=>notes.findIndex((note)=>note.id===parseInt(id));\r\n\r\nconst handler = nc()\r\n.get((req, res)=>{\r\n\r\n    console.log('id', notes)\r\n    const note = getNote(req.query.id);\r\n\r\n    if(!note){\r\n        return res.status(404).json({message:'Note not found'})\r\n    }\r\n    res.json({ data: note })\r\n})\r\n\r\n.post((req, res)=>{\r\n    const note = { ...req.body, id: Date.now()};\r\n    if(!note){\r\n        return res.status(400).json({message: 'note cannot be empty'})\r\n    }\r\n    notes.push(note)\r\n    res.json({ data: note})\r\n})\r\n\r\nexport default handler;"]},"metadata":{},"sourceType":"module"}