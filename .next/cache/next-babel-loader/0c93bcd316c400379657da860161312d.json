{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport notes from '../../../src/data/data';\n\nconst getNote = id => notes.find(n => n.id === parseInt(id));\n\nconst handler = nc().get((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  res.json({\n    data: note\n  });\n}).patch((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  const i = notes.findIndex(n => n.id === parseInt(req.query.id));\n\n  const updated = _objectSpread(_objectSpread({}, note), req.body);\n\n  notes[i] = updated;\n  res.json({\n    data: updated\n  });\n}).delete((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  const i = notes.findIndex(n => n.id === parseInt(req.query.id));\n  notes.splice(i, 1);\n  res.json({\n    data: req.query.id\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/shehroze/Desktop/COURSES/WebDev/nextJs-follow-along/pages/api/note/[id].js"],"names":["nc","notes","getNote","id","find","n","parseInt","handler","get","req","res","note","query","status","end","json","data","patch","i","findIndex","updated","body","delete","splice"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAEA,MAAMC,OAAO,GAAGC,EAAE,IAAIF,KAAK,CAACG,IAAN,CAAWC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,QAAQ,CAACH,EAAD,CAAjC,CAAtB;;AAEA,MAAMI,OAAO,GAAGP,EAAE,GACfQ,GADa,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc;AAEjB,QAAMC,IAAI,GAAGT,OAAO,CAACO,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAApB;;AAEA,MAAI,CAACQ,IAAL,EAAW;AACTD,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX;AACAH,IAAAA,GAAG,CAACI,GAAJ;AACA;AACD;;AAEDJ,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEL;AAAP,GAAT;AACD,CAZa,EAabM,KAba,CAaP,CAACR,GAAD,EAAMC,GAAN,KAAc;AACnB,QAAMC,IAAI,GAAGT,OAAO,CAACO,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAApB;;AAEA,MAAI,CAACQ,IAAL,EAAW;AACTD,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX;AACAH,IAAAA,GAAG,CAACI,GAAJ;AACA;AACD;;AAED,QAAMI,CAAC,GAAGjB,KAAK,CAACkB,SAAN,CAAgBd,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,QAAQ,CAACG,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAAtC,CAAV;;AACA,QAAMiB,OAAO,mCAAOT,IAAP,GAAgBF,GAAG,CAACY,IAApB,CAAb;;AAEApB,EAAAA,KAAK,CAACiB,CAAD,CAAL,GAAWE,OAAX;AACAV,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEI;AAAP,GAAT;AACD,CA3Ba,EA4BbE,MA5Ba,CA4BN,CAACb,GAAD,EAAMC,GAAN,KAAc;AACpB,QAAMC,IAAI,GAAGT,OAAO,CAACO,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAApB;;AAEA,MAAI,CAACQ,IAAL,EAAW;AACTD,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX;AACAH,IAAAA,GAAG,CAACI,GAAJ;AACA;AACD;;AACD,QAAMI,CAAC,GAAGjB,KAAK,CAACkB,SAAN,CAAgBd,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASG,QAAQ,CAACG,GAAG,CAACG,KAAJ,CAAUT,EAAX,CAAtC,CAAV;AAEAF,EAAAA,KAAK,CAACsB,MAAN,CAAaL,CAAb,EAAgB,CAAhB;AAEAR,EAAAA,GAAG,CAACK,IAAJ,CAAS;AAACC,IAAAA,IAAI,EAAEP,GAAG,CAACG,KAAJ,CAAUT;AAAjB,GAAT;AACD,CAzCa,CAAhB;AA4CA,eAAeI,OAAf","sourcesContent":["import nc from 'next-connect'\r\nimport notes from '../../../src/data/data'\r\n\r\nconst getNote = id => notes.find(n => n.id === parseInt(id))\r\n\r\nconst handler = nc()\r\n  .get((req, res) => {\r\n    \r\n    const note = getNote(req.query.id)\r\n\r\n    if (!note) {\r\n      res.status(404)\r\n      res.end()\r\n      return\r\n    }\r\n\r\n    res.json({data: note})\r\n  })\r\n  .patch((req, res) => {\r\n    const note = getNote(req.query.id)\r\n\r\n    if (!note) {\r\n      res.status(404)\r\n      res.end()\r\n      return\r\n    }\r\n    \r\n    const i = notes.findIndex(n => n.id === parseInt(req.query.id))\r\n    const updated = {...note, ...req.body}\r\n\r\n    notes[i] = updated\r\n    res.json({data: updated})\r\n  })\r\n  .delete((req, res) => {\r\n    const note = getNote(req.query.id)\r\n\r\n    if (!note) {\r\n      res.status(404)\r\n      res.end()\r\n      return\r\n    }\r\n    const i = notes.findIndex(n => n.id === parseInt(req.query.id))\r\n    \r\n    notes.splice(i, 1)\r\n\r\n    res.json({data: req.query.id})\r\n  })\r\n  \r\n\r\nexport default handler"]},"metadata":{},"sourceType":"module"}